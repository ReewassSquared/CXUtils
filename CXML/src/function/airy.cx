/*
2019 Brandon Koerner
https://github.com/ReewassSquared/
Licensed under the Apache License 2.0

PURPOSE: 
	Provide functions and utilities for airy function and connected maths things.

FUNCTIONS:
	airy(x) - returns the airy function of x
	dairy(x) - returns the derivative of the airy function of x
	airye(x) - returns the exponentially scaled airy function of x
	dairye(x) - returns the exponentially scaled derivative of the airy function of x
	airymp(x, *m, *p) - stores the modulus and phase of the airy function of x in variables m and p, respectively.
			    x is restricted to be less than or equal to negative one.
	dairymp(x, *m, *p) - stores the modulus and phase of the derivative of the airy function of x in variables m and p, respectively.
			     x is restricted to be less than or equal to negative one.

LAST MODIFIED:
	27 April 2019
*/
package function
include "cxmcore"

var an20cs []f32 = []f32{ 0.0126732217145738027, -0.0005212847072615621, -0.0000052672111140370, -0.0000001628202185026, -0.0000000090991442687, -0.0000000007438647126, -0.0000000000795494752, -0.0000000000104050944, -0.0000000000015932426, -0.0000000000002770648, -0.0000000000000535343, -0.0000000000000113062, -0.0000000000000025772, -0.0000000000000006278, -0.0000000000000001621, -0.0000000000000000441 }

var an21cs []f32 = []f32{ 0.0198313155263169394, -0.0029376249067087533, -0.0001136260695958196, -0.0000100554451087156, -0.0000013048787116563, -0.0000002123881993151, -0.0000000402270833384, -0.0000000084996745953, -0.0000000019514839426, -0.0000000004783865344, -0.0000000001236733992, -0.0000000000334137486, -0.0000000000093702824, -0.0000000000027130128, -0.0000000000008075954, -0.0000000000002463214, -0.0000000000000767656, -0.0000000000000243883, -0.0000000000000078831, -0.0000000000000025882, -0.0000000000000008619, -0.0000000000000002908, -0.0000000000000000993, -0.0000000000000000343 }

var an22cs []f32 = []f32{ 0.0537418629629794329, -0.0126661435859883193, -0.0011924334106593007, -0.0002032327627275655, -0.0000446468963075164, -0.0000113359036053123, -0.0000031641352378546, -0.0000009446708886149, -0.0000002966562236472, -0.0000000969118892024, -0.0000000326822538653, -0.0000000113144618964, -0.0000000040042691002, -0.0000000014440333684, -0.0000000005292853746, -0.0000000001967763374, -0.0000000000740800096, -0.0000000000282016314, -0.0000000000108440066, -0.0000000000042074801, -0.0000000000016459150, -0.0000000000006486827, -0.0000000000002574095, -0.0000000000001027889, -0.0000000000000412846, -0.0000000000000166711, -0.0000000000000067657, -0.0000000000000027585, -0.0000000000000011296, -0.0000000000000004645, -0.0000000000000001917, -0.0000000000000000794, -0.0000000000000000330 }

var aph0cs []f32 = []f32{ -0.0855849241130933257, 0.0011214378867065261, 0.0000042721029353664, 0.0000000817607381483, 0.0000000033907645000, 0.0000000002253264423, 0.0000000000206284209, 0.0000000000023858763, 0.0000000000003301618, 0.0000000000000527010, 0.0000000000000094555, 0.0000000000000018709, 0.0000000000000004024, 0.0000000000000000930, 0.0000000000000000229 }

var aph1cs []f32 = []f32{ -0.1024172908077571694, 0.0071697275146591248, 0.0001209959363122329, 0.0000073361512841220, 0.0000007535382954272, 0.0000001041478171741, 0.0000000174358728519, 0.0000000033399795033, 0.0000000007073075174, 0.0000000001619187515, 0.0000000000394539982, 0.0000000000101192282, 0.0000000000027092778, 0.0000000000007523806, 0.0000000000002156369, 0.0000000000000635283, 0.0000000000000191757, 0.0000000000000059143, 0.0000000000000018597, 0.0000000000000005950, 0.0000000000000001934, 0.0000000000000000638 }

var aph2cs []f32 = []f32{ -0.2057088719781465107, 0.0422196961357771922, 0.0020482560511207275, 0.0002607800735165006, 0.0000474824268004729, 0.0000105102756431612, 0.0000026353534014668, 0.0000007208824863499, 0.0000002103236664473, 0.0000000644975634555, 0.0000000205802377264, 0.0000000067836273921, 0.0000000022974015284, 0.0000000007961306765, 0.0000000002813860610, 0.0000000001011749057, 0.0000000000369306738, 0.0000000000136615066, 0.0000000000051142751, 0.0000000000019351689, 0.0000000000007393607, 0.0000000000002849792, 0.0000000000001107281, 0.0000000000000433412, 0.0000000000000170801, 0.0000000000000067733, 0.0000000000000027017, 0.0000000000000010835, 0.0000000000000004367, 0.0000000000000001769, 0.0000000000000000719, 0.0000000000000000294 }

var aipcs []f32 = []f32{ -0.0187519297793868, -0.0091443848250055, 0.0009010457337825, -0.0001394184127221, 0.0000273815815785, -0.0000062750421119, 0.0000016064844184, -0.0000004476392158, 0.0000001334635874, -0.0000000420735334, 0.0000000139021990, -0.0000000047831848, 0.0000000017047897, -0.0000000006268389, 0.0000000002369824, -0.0000000000918641, 0.0000000000364278, -0.0000000000147475, 0.0000000000060851, -0.0000000000025552, 0.0000000000010906, -0.0000000000004725, 0.0000000000002076, -0.0000000000000924, 0.0000000000000417, -0.0000000000000190, 0.0000000000000087, -0.0000000000000040, 0.0000000000000019, -0.0000000000000009, 0.0000000000000004, -0.0000000000000002, 0.0000000000000001, -0.0000000000000000 }

var aifcs []f32 = []f32{ -0.03797135849666999750, 0.05919188853726363857, 0.00098629280577279975, 0.00000684884381907656, 0.00000002594202596219, 0.00000000006176612774, 0.00000000000010092454, 0.00000000000000012014, 0.00000000000000000010 }

var aigcs []f32 = []f32{ 0.01815236558116127, 0.02157256316601076, 0.00025678356987483, 0.00000142652141197, 0.00000000457211492, 0.00000000000952517, 0.00000000000001392, 0.00000000000000001 }

var daigcs []f32 = []f32{ 0.021233878150918666852, 0.086315930335214406752, 0.001797594720383231358, 0.000014265499875550693, 0.000000059437995283683, 0.000000000152403366479, 0.000000000000264587660, 0.000000000000000331562, 0.000000000000000000314 }

var daifcs []f32 = []f32{ 0.10527461226531408809, 0.01183613628152997844, 0.00012328104173225664, 0.00000062261225638140, 0.00000000185298887844, 0.00000000000363328873, 0.00000000000000504622, 0.00000000000000000522 }

var aip1cs []f32 = []f32{ 0.0358865097808301538, 0.0114668575627764899, -0.0007592073583861400, 0.0000869517610893841, -0.0000128237294298592, 0.0000022062695681038, -0.0000004222295185921, 0.0000000874686415726, -0.0000000192773588418, 0.0000000044668460054, -0.0000000010790108052, 0.0000000002700029447, -0.0000000000696480108, 0.0000000000184489907, -0.0000000000050027817, 0.0000000000013852243, -0.0000000000003908218, 0.0000000000001121536, -0.0000000000000326862, 0.0000000000000096619, -0.0000000000000028935, 0.0000000000000008770, -0.0000000000000002688, 0.0000000000000000832, -0.0000000000000000260 }

var aip2cs []f32 = []f32{ 0.0065457691989713757, 0.0023833724120774592, -0.0000430700770220586, 0.0000015629125858629, -0.0000000815417186163, 0.0000000054103738057, -0.0000000004284130883, 0.0000000000389497963, -0.0000000000039623161, 0.0000000000004428184, -0.0000000000000536297, 0.0000000000000069650, -0.0000000000000009620, 0.0000000000000001403, -0.0000000000000000215 }

var am21cs []f32 = []f32{ 0.0065809191761485, 0.0023675984685722, 0.0001324741670371, 0.0000157600904043, 0.0000027529702663, 0.0000006102679017, 0.0000001595088468, 0.0000000471033947, 0.0000000152933871, 0.0000000053590722, 0.0000000020000910, 0.0000000007872292, 0.0000000003243103, 0.0000000001390106, 0.0000000000617011, 0.0000000000282491, 0.0000000000132979, 0.0000000000064188, 0.0000000000031697, 0.0000000000015981, 0.0000000000008213, 0.0000000000004296, 0.0000000000002284, 0.0000000000001232, 0.0000000000000675, 0.0000000000000374, 0.0000000000000210, 0.0000000000000119, 0.0000000000000068, 0.0000000000000039, 0.0000000000000023, 0.0000000000000013, 0.0000000000000008, 0.0000000000000005, 0.0000000000000003, 0.0000000000000001, 0.0000000000000001, 0.0000000000000000, 0.0000000000000000, 0.0000000000000000 }

var am22cs []f32 = []f32{ -0.01562844480625341, 0.00778336445239681, 0.00086705777047718, 0.00015696627315611, 0.00003563962571432, 0.00000924598335425, 0.00000262110161850, 0.00000079188221651, 0.00000025104152792, 0.00000008265223206, 0.00000002805711662, 0.00000000976821090, 0.00000000347407923, 0.00000000125828132, 0.00000000046298826, 0.00000000017272825, 0.00000000006523192, 0.00000000002490471, 0.00000000000960156, 0.00000000000373448, 0.00000000000146417, 0.00000000000057826, 0.00000000000022991, 0.00000000000009197, 0.00000000000003700, 0.00000000000001496, 0.00000000000000608, 0.00000000000000248, 0.00000000000000101, 0.00000000000000041, 0.00000000000000017, 0.00000000000000007, 0.00000000000000002 }

var ath1cs []f32 = []f32{ -0.07125837815669365, -0.00590471979831451, -0.00012114544069499, -0.00000988608542270, -0.00000138084097352, -0.00000026142640172, -0.00000006050432589, -0.00000001618436223, -0.00000000483464911, -0.00000000157655272, -0.00000000055231518, -0.00000000020545441, -0.00000000008043412, -0.00000000003291252, -0.00000000001399875, -0.00000000000616151, -0.00000000000279614, -0.00000000000130428, -0.00000000000062373, -0.00000000000030512, -0.00000000000015239, -0.00000000000007758, -0.00000000000004020, -0.00000000000002117, -0.00000000000001132, -0.00000000000000614, -0.00000000000000337, -0.00000000000000188, -0.00000000000000105, -0.00000000000000060, -0.00000000000000034, -0.00000000000000020, -0.00000000000000011, -0.00000000000000007, -0.00000000000000004, -0.00000000000000002 }

var ath2cs []f32 = []f32{ 0.00440527345871877, -0.03042919452318455, -0.00138565328377179, -0.00018044439089549, -0.00003380847108327, -0.00000767818353522, -0.00000196783944371, -0.00000054837271158, -0.00000016254615505, -0.00000005053049981, -0.00000001631580701, -0.00000000543420411, -0.00000000185739855, -0.00000000064895120, -0.00000000023105948, -0.00000000008363282, -0.00000000003071196, -0.00000000001142367, -0.00000000000429811, -0.00000000000163389, -0.00000000000062693, -0.00000000000024260, -0.00000000000009461, -0.00000000000003716, -0.00000000000001469, -0.00000000000000584, -0.00000000000000233, -0.00000000000000093, -0.00000000000000037, -0.00000000000000015, -0.00000000000000006, -0.00000000000000002 }

func dairymp (x f32, amp *f32, phi *f32) {
	var pi34 f32 = 2.3561944901923449
	var sqrtx f32 = f32.sqrt(x)
	var xsml f32 = f32.mul(-1.0, f32.pow(f32.div(128.0, 5.9604645E-08), 0.3333))
	var z f32
	if x <= xsml  {
		z = 1.0
		*amp = f32.add(0.3125, csevutil(z, an20cs))
		*phi = f32.add(-0.625, csevutil(z, aph0cs))
	} else if x < -4.0 {
		z = f32.add(f32.div(f32.div(f32.div(128.0, x), x), x), 1.0)
		*amp = f32.add(0.3125, csevutil(z, an20cs))
		*phi = f32.add(-0.625, csevutil(z, aph0cs))
	} else if x < -2.0 {
		z = f32.div(f32.add(f32.div(f32.div(f32.div(128.0, x), x), x), 9.0), 7.0)
		*amp = f32.add(0.3125, csevutil(z, an21cs))
		*phi = f32.add(-0.625, csevutil(z, aph1cs))
	} else if x <= -1.0 {
		z = f32.div(f32.add(f32.div(f32.div(f32.div(16.0, x), x), x), 9.0), 7.0)
		*amp = f32.add(0.3125, csevutil(z, an22cs))
		*phi = f32.add(-0.625, csevutil(z, aph2cs))
	} else {
		CXMError(sprintf("X out of bounds for dairymp: %f", x))
	}
	sqrtx = f32.sqrt(f32.mul(-1.0, x))
	*amp = f32.sqrt(f32.mul(*ampl, sqrtx))
	*phi = f32.sub(pi34, f32.mul(x, f32.mul(sqrtx, *phi)))
}

func airy (x f32) (out f32) {
	var theta f32
	var x3sml f32 = f32.pow(5.9604645E-08, 0.3334)
	var xm f32
	var xmax f32 =  f32.pow(f32.mul(-1.5, f32.log(1.1754944E-38)), 0.6667)
	xmax = f32.sub(f32.sub(xmax, f32.div(f32.mul(xmax, f32.log(xmax)), f32.add(f32.mul(4.0, f32.mul(xmax, f32.sqrt(xmax))) + 1.0))) - 0.01)
	var z f32
	if x < -1.0 {
		airymp(x, &xm, &theta)
		out = f32.mul(xm, f32.cos(theta))
	} else if f32.abs(x) <= x3sml {
		z = 0.0
		out =f32.add(0.375, f32.sub(csevutil(z, aifcs), f32.mul(x, f32.add(0.25, csevutil(z, aigcs)))))
	} else if x <= 1.0 {
		z = f32.mul(x, f32.mul(x, x))
		out =f32.add(0.375, f32.sub(csevutil(z, aifcs), f32.mul(x, f32.add(0.25, csevutil(z, aigcs)))))
	} else if x <= xmax {
		out = f32.mul(airye(x), f32.pow(2.71828182845904523536, f32.div(f32.mul(-2.0, f32.mul(x, f32.sqrt(x))), 3.0)))
	} else {
		out = 0.0
	}
}

func dairy (x f32) (out f32) {
	var phi f32
	var value f32
	var x3 f32
	var x2 f32
	var xn f32
	var x2sml f32 = f32.sqrt(5.9604645E-08)
	var x3sml f32 = f32.pow(5.9604645E-08, 0.3334)
	if x < -1.0 {
		dairymp(x, &xn, &phi)
		out = f32.mul(xn, f32.cos(phi))
	}  else if f32.abs(x) <= x2sml {
		x2 = 0.0
		x3 = 0.0
		out = f32.sub(f32.mul(x2, f32.sub(f32.add(0.125, csevutil(x3, daifcs)), csevutil(x3, daigcs))), 0.25)
	} else if f32.abs(x) <= x3sml {
		x2 = f32.mul(x, x)
		x3 = 0.0E+00;
		out = f32.sub(f32.mul(x2, f32.sub(f32.add(0.125, csevutil(x3, daifcs)), csevutil(x3, daigcs))), 0.25)
	} else if x <= 1.0 {
		x2 = f32.mul(x, x)
		x3 = f32.mul(x, f32.mul(x, x))
		out = f32.sub(f32.mul(x2, f32.sub(f32.add(0.125, csevutil(x3, daifcs)), csevutil(x3, daigcs))), 0.25)
	} else {
		out = f32.mul(dairye(x), f32.pow(2.71828182845904523536, f32.div(f32.mul(f32.mul(-2.0, x), f32.sqrt(x)), 3.0)))
	}
}

func dairye (x f32) (out f32) {
	var eta f32 = f32.mul(0.1, 5.9604645E-08)
	var phi f32
	var sqrtx f32
	var x2 f32
	var x3 f32
	var xn f32
	var x2sml f32 = f32.sqrt(eta)
	var x32sml f32 = f32.mul(1.3104, f32.mul(x3sml, x3sml))
	var x3sml f32 = f32.pow(eta, 0.3333)
	var xbig f32 = f32.pow(3.4028235E+38, 0.6666)
	var z f32
	if x < -1.0 {
		dairymp(x, &xn, &phi )
		out = f32.mul(xn, f32.cos(phi))
	} else if f32.abs(x) <= x2sml {
		x2 = 0.0
		x3 = 0.0
		out = f32.sub(f32.sub(f32.mul(x2, f32.add(0.125, csevutil(x3, daifcs))), csevutil(x3, daigcs)), 0.25)
	} else if f32.abs(x) <= x3sml {
		x2 = f32.mul(x, x)
		x3 = 0.0
		out = f32.sub(f32.sub(f32.mul(x2, f32.add(0.125, csevutil(x3, daifcs))), csevutil(x3, daigcs)), 0.25)
	} else if f32.abs(x) <= x32sml {
		x2 = f32.mul(x, x)
		x3 = f32.mul(x, x2)
		out = f32.sub(f32.sub(f32.mul(x2, f32.add(0.125, csevutil(x3, daifcs))), csevutil(x3, daigcs)), 0.25)
	} else if x <= 1.0 {
		x2 = f32.mul(x, x)
		x3 = f32.mul(x, x2)
		out = f32.sub(f32.sub(f32.mul(x2, f32.add(0.125, csevutil(x3, daifcs))), csevutil(x3, daigcs)), 0.25)
		out = f32.mul(out, f32.pow(f32.div(f32.mul(f32.mul(2.0, x), f32.sqrt(x)), 3.0)))
	} else if x <= 4.0 {
		sqrtx = f32.sqrt(x)
		z = f32.div(f32.sub(f32.div(16.0, f32.mul(x, sqrtx)), 9.0), 7.0)
		out = f32.mul(f32.sub(-0.28125, csevutil(z, aip1cs)), f32.sqrt(sqrtx)) 
	} else if x < xbig {
		sqrtx = f32.sqrt(x)
		z = f32.sub(f32.div(16.0, f32.mul(x, sqrtx)), 1.0)
		out = f32.mul(f32.sub(-0.28125, csevutil(z, aip2cs)), f32.sqrt(sqrtx))
	} else {
		sqrtx = f32.sqrt(x)
		z = -1.0
		out = f32.mul(f32.sub(-0.28125, csevutil(z, aip2cs)), f32.sqrt(sqrtx))
	}
}

func airye (x f32) (out f32) {
	var eta f32 = f32.mul(0.1, 5.9604645E-08)
	var theta f32
	var sqrtx f32
	var x32sml f32 = f32.mul(1.3104, f32.mul(x3sml, x3sml))
	var x3sml f32 = f32.pow(eta, 0.3333)
	var xbig f32 = f32.pow(3.4028235E+38, 0.6666)
	var z f32
	var xm f32
	if x < -1.0 {
		airymp(x, &xm, &theta)
		value = f32.mul(xm, f32.cos(theta))
	} else if f32.abs(x) <= x32sml {
		z = 0.0
		out = f32.add(0.375, f32.sub(csevutil(z, aifcs), f32.mul(x, f32.add(0.25, csevutil(z, aigcs)))))
	} else if ( f32.abs(x) <= x3sml {
    		z = 0.0
		out = f32.add(0.375, f32.sub(csevutil(z, aifcs), f32.mul(x, f32.add(0.25, csevutil(z, aigcs)))))
		out = f32.mul(out, f32.pow(f32.div(f32.mul(f32.mul(2.0, x), f32.sqrt(x)), 3.0)))
	} else if x <= 1.0 {
		z = f32.mul(x, f32.mul(x, x))
		out = f32.add(0.375, f32.sub(csevutil(z, aifcs), f32.mul(x, f32.add(0.25, csevutil(z, aigcs)))))
		out = f32.mul(out, f32.pow(f32.div(f32.mul(f32.mul(2.0, x), f32.sqrt(x)), 3.0)))
	} else if x < xbig  {
		sqrtx = f32.sqrt(x)
		z = f32.sub(f32.div(2.0, f32.mul(x, sqrtx)), 1.0)
		out = f32.div(f32.add(0.28125, csevutil(z, aipcs)), f32.sqrt(sqrtx))
	} else {
		sqrtx = f32.sqrt(x)
		z = -1.0
		out = f32.div(f32.add(0.28125, csevutil(z, aipcs)), f32.sqrt(sqrtx))
	}
}

func airymp (x f32, amp *f32, theta *f32) {
	var pi4 f32 = 0.78539816339744831;
	var sqrtx f32
	var xsml f32 = f32.mul(-1.0, f32.pow(f32.div(16.0, 5.9604645E-08), 0.3333))
	var z f32
	if x <= xsml {
		z = 1.0
		*ampl = f32.add(0.3125, csevutil(z, am21cs))
		*theta = f32.add(-0.625, csevutil(z, ath1cs))
	} else if x < - 2.0 {
		z = f32.add(f32.div(f32.div(f32.div(16.0, x), x), x), 1.0)
		*ampl = f32.add(0.3125, csevutil(z, am21cs))
		*theta = f32.add(-0.625, csevutil(z, ath1cs))
	} else if x <= - 1.0 {
		z = f32.div(f32.add(f32.div(f32.div(f32.div(16.0, x), x), x), 9.0), 7.0)
		*ampl = f32.add(0.3125, csevutil(z, am22cs))
		*theta = f32.add(-0.625, csevutil(z, ath2cs))
	} else {
		CXMError(sprintf("X out of range for airymp: %f", x))
	}
	sqrtx = f32.sqrt(f32.mul(-1.0, x))
	*ampl = f32.sqrt(f32.div(*ampl, sqrtx))
	*theta = f32.sub(pi4, f32.mul(x, f32.mul(sqrtx, *theta)))
}
