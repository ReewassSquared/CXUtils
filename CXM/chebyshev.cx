package cxm

func chebynode (num i32) (out []f64) {
	out = resize(out, num)
	for i := 1; i <= num; i++ {
		out[i-1] = f64.cos(f64.sub(f64.mul(2.0D, i32.f64(i)), 1.0D)
		out[i-1] = f64.div(f64.mul(out[i-1], 3.14159265358979323846D), f64.mul(2.0D, i32.f64(num))) 
	}
}

func chebyapprox (coeff []f64, x f64, a f64, b f64) (out f64) {
	if a == b {
		CXMError("chebyshev bounds are equal!")
	}
	if len(coeff) == 0 {
		CXMError("no chebyshev coefficients given!")
	}
	var tn f64
	var tp f64
	var t f64
	var u f64
	u = f64.div(f64.sub(f64.mul(2.0D, x), f64.add(a, b)), f64.sub(b, a))
	tp = 1.0D
	t = u
	out = coeff[0]
	for i := 1; i < len(coeff); i++ {
		out = f64.add(out, f64.mul(t, coeff[i]))
		tn = f64.sub(f64.mul(f64.mul(u, t), 2.0D), tp)
		tp = t
		t = tn
	}
}